openapi: 3.1.0
info:
  title: Walandoo API
  version: 1.0.0
  description: |
    REST API for the Walandoo e-commerce demo application.
servers:
  - url: /api
paths:
  /products/:
    get:
      summary: List all products
      operationId: listProducts
      tags: [Products]
      responses:
        '200':
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /products/{id}/:
    get:
      summary: Retrieve a product by ID
      operationId: getProduct
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
  /stock/:
    get:
      summary: List all stock records
      operationId: listStock
      tags: [Stock]
      responses:
        '200':
          description: A list of stock records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Stock'
  /stock/{product_id}/:
    get:
      summary: Retrieve stock by product ID
      operationId: getStockByProductId
      tags: [Stock]
      parameters:
        - name: product_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Stock details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Stock'
        '404':
          description: Stock not found
  /customers/{id}/:
    get:
      summary: Retrieve your customer profile
      operationId: getCustomer
      tags: [Customers]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Customer details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Customer not found
    put:
      summary: Update your customer profile
      operationId: updateCustomer
      tags: [Customers]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Customer not found
    delete:
      summary: Delete your customer profile
      operationId: deleteCustomer
      tags: [Customers]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Customer deleted
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Customer not found
  /carts/:
    get:
      summary: List your shopping carts
      operationId: listCarts
      tags: [ShoppingCarts]
      security:
        - TokenAuth: []
      responses:
        '200':
          description: A list of your shopping carts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingCart'
        '401':
          description: Not authenticated
    post:
      summary: Create a shopping cart
      operationId: createCart
      tags: [ShoppingCarts]
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCart'
      responses:
        '201':
          description: Shopping cart created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        '401':
          description: Not authenticated
  /carts/{id}/:
    get:
      summary: Retrieve a shopping cart by ID
      operationId: getCart
      tags: [ShoppingCarts]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Shopping cart details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Shopping cart not found
    put:
      summary: Update a shopping cart
      operationId: updateCart
      tags: [ShoppingCarts]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCart'
      responses:
        '200':
          description: Shopping cart updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCart'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Shopping cart not found
    delete:
      summary: Delete a shopping cart
      operationId: deleteCart
      tags: [ShoppingCarts]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Shopping cart deleted
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Shopping cart not found
  /cart-items/:
    get:
      summary: List all shopping cart items
      operationId: listCartItems
      tags:
        - ShoppingCartItems
      security:
        - TokenAuth: []
      responses:
        '200':
          description: A list of shopping cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ShoppingCartItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Add item to shopping cart
      operationId: addCartItem
      tags:
        - ShoppingCartItems
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCartItem'
      responses:
        '201':
          description: Shopping cart item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartItem'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /cart-items/{id}/:
    get:
      summary: Retrieve a shopping cart item by ID
      operationId: getCartItem
      tags:
        - ShoppingCartItems
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Shopping cart item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartItem'
        '404':
          description: Shopping cart item not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Update a shopping cart item
      operationId: updateCartItem
      tags:
        - ShoppingCartItems
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingCartItem'
      responses:
        '200':
          description: Shopping cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingCartItem'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      summary: Delete a shopping cart item
      operationId: deleteCartItem
      tags:
        - ShoppingCartItems
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Shopping cart item deleted
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /orders/:
    get:
      summary: List your orders
      operationId: listOrders
      tags: [Orders]
      security:
        - TokenAuth: []
      responses:
        '200':
          description: A list of your orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          description: Not authenticated
    post:
      summary: Create an order
      operationId: createOrder
      tags: [Orders]
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Not authenticated
  /orders/{id}/:
    get:
      summary: Retrieve your order by ID
      operationId: getOrder
      tags: [Orders]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Order not found
    put:
      summary: Update your order
      operationId: updateOrder
      tags: [Orders]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Order updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Order not found
    delete:
      summary: Delete your order
      operationId: deleteOrder
      tags: [Orders]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Order deleted
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Order not found
  /shipments/:
    get:
      summary: List your shipments
      operationId: listShipments
      tags: [Shipments]
      security:
        - TokenAuth: []
      responses:
        '200':
          description: A list of your shipments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shipment'
        '401':
          description: Not authenticated
    post:
      summary: Create a shipment
      operationId: createShipment
      tags: [Shipments]
      security:
        - TokenAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '201':
          description: Shipment created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '401':
          description: Not authenticated
  /shipments/{id}/:
    get:
      summary: Retrieve your shipment by ID
      operationId: getShipment
      tags: [Shipments]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Shipment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Shipment not found
    put:
      summary: Update your shipment
      operationId: updateShipment
      tags: [Shipments]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Shipment updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Shipment not found
    delete:
      summary: Delete your shipment
      operationId: deleteShipment
      tags: [Shipments]
      security:
        - TokenAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Shipment deleted
        '401':
          description: Not authenticated
        '403':
          description: Forbidden
        '404':
          description: Shipment not found
  /auth/register/:
    post:
      summary: Register a new user
      operationId: registerUser
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                email:
                  type: string
              required:
                - username
                - password
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
  /auth/token/:
    post:
      summary: Obtain authentication token
      operationId: obtainToken
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Token obtained
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /auth/profile/:
    get:
      summary: Get current user profile
      operationId: getProfile
      tags:
        - Authentication
      security:
        - TokenAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        price:
          type: number
          format: float
        description:
          type: string
        category:
          type: string
        image_url:
          type: string
      required:
        - id
        - name
        - price
        - description
        - category
        - image_url
    Stock:
      type: object
      properties:
        id:
          type: integer
        product:
          type: integer
        product_name:
          type: string
        quantity:
          type: integer
        last_updated:
          type: string
          format: date-time
      required:
        - id
        - product
        - quantity
        - last_updated
    Customer:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        address:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - first_name
        - last_name
        - email
        - created_at
    ShoppingCart:
      type: object
      properties:
        id:
          type: integer
        customer:
          type: integer
        created_at:
          type: string
          format: date-time
        checked_out:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingCartItem'
      required:
        - id
        - customer
        - created_at
        - checked_out
    ShoppingCartItem:
      type: object
      properties:
        id:
          type: integer
        product:
          type: integer
        product_name:
          type: string
        quantity:
          type: integer
      required:
        - id
        - product
        - quantity
    Order:
      type: object
      properties:
        id:
          type: integer
        customer:
          type: integer
        created_at:
          type: string
          format: date-time
        total:
          type: number
          format: float
        status:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
      required:
        - id
        - customer
        - created_at
        - total
        - status
    OrderItem:
      type: object
      properties:
        id:
          type: integer
        product:
          type: integer
        product_name:
          type: string
        quantity:
          type: integer
        price:
          type: number
          format: float
      required:
        - id
        - product
        - quantity
        - price
    Shipment:
      type: object
      properties:
        id:
          type: integer
        order:
          type: integer
        tracking_number:
          type: string
        carrier:
          type: string
        status:
          type: string
        shipped_at:
          type: string
          format: date-time
        delivered_at:
          type: string
          format: date-time
        last_updated:
          type: string
          format: date-time
      required:
        - id
        - order
        - tracking_number
        - carrier
        - status
        - last_updated
  responses:
    UnauthorizedError:
      description: Authentication credentials were not provided or are invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: 'Authentication credentials were not provided.'
    BadRequestError:
      description: Bad request due to invalid input.
      content:
        application/json:
          schema:
            type: object
            properties:
              detail:
                type: string
                example: 'Invalid input.'
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
      bearerFormat: Token
security:
  - TokenAuth: []